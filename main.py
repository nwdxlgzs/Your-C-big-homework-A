# 生成VSCode的C编译配置

import os
import shutil

isWindowsSystem = os.name == "nt"


def escapePath_1(path):
    return path.replace("\\", "\\\\").replace("\\\\\\\\", "\\\\")


def escapePath_2(path):
    return path.replace("\\", "/").replace("//", "/")


fileFMT = {
    # escapePath_2
    "c_cpp_properties.json": lambda gcc: '''{
    "configurations": [
        {
            "name": "windows-gcc-x86",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "compilerPath": "'''+gcc+'''",
            "cStandard": "${default}",
            "cppStandard": "${default}",
            "intelliSenseMode": "windows-gcc-x86",
            "compilerArgs": [
                ""
            ],
            "configurationProvider": "ms-vscode.makefile-tools"
        }
    ],
    "version": 4
}''',
    # escapePath_1
    "launch.json": lambda gdb: '''{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "C/C++ Runner: Debug Session",
      "type": "cppdbg",
      "request": "launch",
      "args": [],
      "stopAtEntry": false,
      "externalConsole": true,
      "cwd": "${workspaceFolder}",
      "program": "${fileDirname}\\\\main.exe",
      "MIMode": "gdb",
      "miDebuggerPath": "'''+gdb+'''",
      "preLaunchTask": "C/C++: gcc.exe build active file",
      "setupCommands": [
        {
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        }
      ]
    }
  ]
}''',
    "settings.json": lambda: '''{
  "C_Cpp_Runner.cCompilerPath": "gcc",
  "C_Cpp_Runner.cppCompilerPath": "g++",
  "C_Cpp_Runner.debuggerPath": "gdb",
  "C_Cpp_Runner.cStandard": "",
  "C_Cpp_Runner.cppStandard": "",
  "C_Cpp_Runner.msvcBatchPath": "",
  "C_Cpp_Runner.useMsvc": false,
  "C_Cpp_Runner.warnings": [
    "-Wall",
    "-Wextra",
    "-Wpedantic"
  ],
  "C_Cpp_Runner.enableWarnings": true,
  "C_Cpp_Runner.warningsAsError": false,
  "C_Cpp_Runner.compilerArgs": [],
  "C_Cpp_Runner.linkerArgs": [],
  "C_Cpp_Runner.includePaths": [],
  "C_Cpp_Runner.includeSearch": [
    "*",
    "**/*",
    "**/**/*"
  ],
  "C_Cpp_Runner.excludeSearch": [
    "**/build",
    "**/build/**",
    "**/.*",
    "**/.*/**",
    "**/.vscode",
    "**/.vscode/**"
  ],
  "files.associations": {
    "*.h": "c",
    "*.hpp": "cpp",
    "*.hxx": "cpp",
    "*.hh": "cpp",
    "*.h++": "cpp",
  },
}''',
    "configurationCache.log": lambda: '''{"buildTargets":[],"launchTargets":[],"customConfigurationProvider":{"workspaceBrowse":{"browsePath":[],"compilerArgs":[]},"fileIndex":[]}}''',
    # escapePath_1
    "tasks.json": lambda gcc, bin: '''{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: gcc.exe build active file",
            "command": "'''+gcc+'''",
            "args": [
                "-g",
                "${fileDirname}\\\\**.c",
                "-o",
                "${fileDirname}\\\\main.exe",
'''+(
'''
                // socket
                "-lws2_32",
''' if isWindowsSystem else ""
) + '''
            ],
            "options": {
                "cwd": "'''+bin+'''"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
}''',
}

mingw = input("mingw path: ")
if(mingw[0] == '"'):
    mingw = mingw[1:-1]
bin = mingw + "\\bin"
gcc = bin + "\\gcc.exe"
gdb = bin + "\\gdb.exe"

# 检查是否存在
fok = True
if(not os.path.exists(mingw)):
    print("mingw dir not exists")
    fok = False
if(not os.path.exists(bin)):
    print("bin dir not exists")
    fok = False
if(not os.path.exists(gcc)):
    print("gcc.exe file not exists")
    fok = False
if(not os.path.exists(gdb)):
    print("gdb.exe file not exists")
    fok = False
if(fok):
    # 创建.vscode目录
    if(not os.path.exists(".vscode")):
        os.mkdir(".vscode")
    # 生成文件
    setstr = fileFMT["c_cpp_properties.json"](escapePath_2(gcc))
    with open(".vscode\\c_cpp_properties.json", "w") as f:
        f.write(setstr)
    setstr = fileFMT["launch.json"](escapePath_1(gdb))
    with open(".vscode\\launch.json", "w") as f:
        f.write(setstr)
    setstr = fileFMT["settings.json"]()
    with open(".vscode\\settings.json", "w") as f:
        f.write(setstr)
    setstr = fileFMT["configurationCache.log"]()
    with open(".vscode\\configurationCache.log", "w") as f:
        f.write(setstr)
    setstr = fileFMT["tasks.json"](escapePath_1(gcc), escapePath_1(bin))
    with open(".vscode\\tasks.json", "w") as f:
        f.write(setstr)
    # 检查空格
    if (mingw.find(" ") != -1):
        print("warning: mingw path contains space")
    # 检查是否是纯英文路径
    if (not mingw.isascii()):
        print("warning: mingw path contains non-ascii character")
    print("finished creating .vscode files")

project = input("project path: ")
if(project[0] == '"'):
    project = project[1:-1]
fok = True
# 检查空格
if (project.find(" ") != -1):
    print("warning: project path contains space")
    fok = False
# 检查是否是纯英文路径
if (not project.isascii()):
    print("warning: project path contains non-ascii character")
    fok = False
if(fok and not os.path.exists(project)):
    print("project dir not exists, we will create it")
    os.mkdir(project)
    print("finished creating project dir")
if(fok):
    # 拷贝.vscode目录
    if(not os.path.exists(project + "\\.vscode")):
        shutil.copytree(".vscode", project + "\\.vscode")
    # main.c
    if(not os.path.exists(project + "\\main.c")):
        with open(project + "\\main.c", "w") as f:
            f.write('''#include <stdio.h>
# include <stdlib.h>
# include <string.h>

int main(int argc, char *argv[]){
    printf("hello world\\n");
    system("pause");//pause for vscode compile
    return 0;
}
''')
print("end")